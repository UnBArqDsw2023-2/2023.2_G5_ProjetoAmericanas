# USAGE:
# ansible-playbook -i inventory.ini cd.yml \
#   --extra-vars "branch=main
#                 django_secret_key='django-insecure-0o@o1g#=*z^aux@mb@)&50%=2k+)5y6w@u8^np5tn1lv)s=qm8'
#                 superuser_email='super'
#                 superuser_password='senha12345'
#                 sender_email='substitute-with-an-email'
#                 postgres_host='10.0.1.60'
#                 postgres_port='5432'
#                 postgres_db='backend'
#                 postgres_user='hSfNPGyOjeuWtwunpXoywTqrxITNOkDq'
#                 postgres_password='BWT2Q6dSjZtr5iAruIe7TOfMigE1lfsZDIcNIDuMYmyLc51dwvHkpIyI57qJIQhx'
#                 server_name='54.233.104.106.sslip.io'"

- name: Setup Americas Web App Server
  hosts: server
  remote_user: ubuntu
  vars:
    timezone: America/Sao_Paulo
    # Only run "apt update && apt upgrade" if the last update is older than 24*60*60 seconds.
    cache_valid_time: 86400
    branch: main

  tasks:
    - name: Update and upgrade apt packages
      become: true
      ansible.builtin.apt:
        upgrade: true
        update_cache: true
        cache_valid_time: "{{ cache_valid_time | int }}"

    - name: Set the timezone to {{ timezone | quote }}
      become: true
      community.general.timezone:
        name: "{{ timezone | quote }}"

    - name: Install tzdata, and ensure it is at the latest version
      become: true
      ansible.builtin.apt:
        name: tzdata
        state: latest
        install_recommends: false

    - name: Install git
      become: true
      ansible.builtin.apt:
        name: git
        state: latest
        install_recommends: false

    - name: Install Docker
      become: true
      ansible.builtin.shell:
        cmd: |
          wget https://get.docker.com/ -O - | sudo tee /install_docker.sh
          sudo sh /install_docker.sh
        creates: /install_docker.sh

    - name: Install Docker Compose
      ansible.builtin.shell:
        cmd: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
        creates: ~/.docker/cli-plugins/docker-compose

    - name: Choose the repository folder (1)
      ansible.builtin.shell:
        cmd: |
          echo $HOME/app
      register: repo_root_

    - name: Choose the repository folder (2)
      ansible.builtin.set_fact:
        repo_root: "{{ repo_root_.stdout }}"

    - name: Clone the repository (no need for 'ansible.builtin.git')
      ansible.builtin.shell:
        cmd: |
          rm -rf {{ repo_root }}
          git clone https://github.com/UnBArqDsw2023-2/2023.2_G5_ProjetoAmericanas -b {{ branch | quote }} {{ repo_root }}

    - name: Create folder for the env files
      ansible.builtin.shell:
        cmd: |
          mkdir -p {{ repo_root }}/.envs/production

    - name: Create "django" env file
      ansible.builtin.shell:
        cmd: |
          echo "\
          DJANGO_SECRET_KEY={{ django_secret_key | quote }}
          SUPERUSER_EMAIL={{ superuser_email | quote }}
          SUPERUSER_PASSWORD={{ superuser_password | quote }}
          " | sudo tee {{ repo_root }}/.envs/production/django

    - name: Create "email" env file
      ansible.builtin.shell:
        cmd: |
          echo "\
          SENDER_EMAIL={{ sender_email | quote }}
          " | sudo tee {{ repo_root }}/.envs/production/email

    # - name: Create "email_password" env file
    #   ansible.builtin.shell:
    #     cmd: |
    #       echo "\
    #       SENDER_PASSWORD={{ sender_password | quote }}
    #       " | sudo tee {{ repo_root }}/.envs/production/email_password

    - name: Create "postgres" env file
      ansible.builtin.shell:
        cmd: |
          echo "\
          POSTGRES_HOST={{ postgres_host | quote }}
          POSTGRES_PORT={{ postgres_port | quote }}
          POSTGRES_DB={{ postgres_db | quote }}
          POSTGRES_USER={{ postgres_user | quote }}
          POSTGRES_PASSWORD={{ postgres_password | quote }}
          " | sudo tee {{ repo_root }}/.envs/production/postgres

    - name: Create "server_name" env file
      ansible.builtin.shell:
        cmd: |
          echo "\
          SERVER_NAME={{ server_name | quote }}
          BACKEND_URL='https://{{ server_name }}/api'
          " | sudo tee {{ repo_root }}/.envs/production/server_name

    #TODO: maybe replace 'ansible.builtin.shell' with 'community.docker.docker_compose'
    - name: Build the services
      become: true
      ansible.builtin.shell:
        cmd: |
          docker compose --project-directory {{ repo_root }} build

    #TODO: maybe replace 'ansible.builtin.shell' with 'community.docker.docker_compose'
    - name: Remove containers and networks, but keep images and volumes
      become: true
      ansible.builtin.shell:
        cmd: |
          docker compose --project-directory {{ repo_root }} down

    #TODO: maybe replace 'ansible.builtin.shell' with 'community.docker.docker_compose'
    - name: Start the services
      become: true
      ansible.builtin.shell:
        cmd: |
          docker compose --project-directory {{ repo_root }} up --no-deps frontend
          docker compose --project-directory {{ repo_root }} up -d backend nginx certbot

